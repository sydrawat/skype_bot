{
  "swagger": "2.0",
  "info": {
    "version": "v3",
    "title": "Microsoft Bot Connector API - v3.0",
    "description": "﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the\r\n[Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST\r\nand JSON over HTTPS.\r\n\r\nClient libraries for this REST API are available. See below for a list.\r\n\r\nMany bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The\r\nBot State REST API allows a bot to store and retrieve state associated with users and conversations.\r\n\r\nAuthentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is\r\ndescribed in detail in the [Connector Authentication](/en-us/restapi/authentication) document.\r\n\r\n# Client Libraries for the Bot Connector REST API\r\n\r\n* [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)\r\n* [Bot Builder for Node.js](/en-us/node/builder/overview/)\r\n* Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)\r\n\r\n© 2016 Microsoft",
    "termsOfService": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx",
    "contact": {
      "name": "Bot Framework",
      "url": "https://botframework.com",
      "email": "botframework@microsoft.com"
    },
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "api.botframework.com",
  "schemes": [ "https" ],
  "paths": {
    "/v3/attachments/{attachmentId}": {
      "get": {
        "tags": [ "Attachments" ],
        "summary": "GetAttachmentInfo",
        "description": "Get AttachmentInfo structure describing the attachment views",
        "operationId": "Attachments_GetAttachmentInfo",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "attachment id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An attachmentInfo object is returned which describes the:\r\n* type of the attachment\r\n* name of the attachment\r\n\r\n\r\nand an array of views:\r\n* Size - size of the object\r\n* ViewId - View Id which can be used to fetch a variation on the content (ex: original or thumbnail)",
            "schema": { "$ref": "#/definitions/AttachmentInfo" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/attachments/{attachmentId}/views/{viewId}": {
      "get": {
        "tags": [ "Attachments" ],
        "summary": "GetAttachment",
        "description": "Get the named view as binary content",
        "operationId": "Attachments_GetAttachment",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "attachment id",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewId",
            "in": "path",
            "description": "View id from attachmentInfo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of bytes which represent the content.",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "301": { "description": "﻿The Location header describes where the content is now." },
          "302": { "description": "﻿The Location header describes where the content is now." },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}": {
      "post": {
        "tags": [ "Conversations" ],
        "operationId": "Conversations_ReplyToActivity",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          }
        ],
        "responses": {
          "200": { "description": "﻿The operation succeeded." },
          "201": { "description": "" },
          "202": { "description": "" },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "CreateConversation",
        "description": "Create a new Conversation.\r\n\r\nPOST to this method with a\r\n* Bot being the bot creating the conversation\r\n* IsGroup set to true if this is not a direct message (default is false)\r\n* Members array contining the members you want to have be in the conversation.\r\n\r\nThe return value is a ResourceResponse which contains a conversation id which is suitable for use\r\nin the message payload and REST API uris.\r\n\r\nMost channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:\r\n\r\n```\r\nvar resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );\r\nawait connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;\r\n\r\n```",
        "operationId": "Conversations_CreateConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters to create the conversation from",
            "required": true,
            "schema": { "$ref": "#/definitions/ConversationParameters" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "SendToConversation",
        "description": "This method allows you to send a message to a conversation without refering to an activity. \r\nThis is useful to send an initial message to a conversation, or to add a message to the end of the conversation.",
        "operationId": "Conversations_SendToConversation",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send",
            "required": true,
            "schema": { "$ref": "#/definitions/Activity" }
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "﻿The operation succeeded." },
          "201": { "description": "" },
          "202": { "description": "" },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "GetConversationMembers",
        "description": "Call this method to enumerate the members of a converstion. \r\n\r\nThis REST API takes a ConversationId and returns an array of ChannelAccount[] objects \r\nwhich are the members of the conversation.",
        "operationId": "Conversations_GetConversationMembers",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of ChannelAccount objects",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}/members": {
      "get": {
        "tags": [ "Conversations" ],
        "summary": "GetActivityMembers",
        "description": "Call this method to enumerate the members of an activity. \r\n\r\nThis REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount[] objects \r\nwhich are the members of the particular activity in the conversation.",
        "operationId": "Conversations_GetActivityMembers",
        "consumes": [ ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "﻿An array of ChannelAccount objects",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ChannelAccount" }
            }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    },
    "/v3/conversations/{conversationId}/attachments": {
      "post": {
        "tags": [ "Conversations" ],
        "summary": "UploadAttachment",
        "description": "This method allows you to upload an attachment directly into a channels blob storage.\r\n\r\nThis is useful because it allows you to store data in a compliant store when dealing with enterprises.\r\n\r\nThe response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments api.",
        "operationId": "Conversations_UploadAttachment",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentUpload",
            "in": "body",
            "description": "Attachment data",
            "required": true,
            "schema": { "$ref": "#/definitions/AttachmentData" }
          }
        ],
        "responses": {
          "200": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "201": {
            "description": "﻿A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": { "$ref": "#/definitions/ResourceResponse" }
          },
          "202": {
            "description": "﻿The operation has been accepted and will be processed.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "400": {
            "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "401": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "403": {
            "description": "﻿The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "404": {
            "description": "﻿The resource was not found.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "500": {
            "description": "﻿An internal server has occurred. Inspect the message for a more detailed description.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          },
          "503": {
            "description": "﻿The service you are trying to communciate with is unavailable.",
            "schema": { "$ref": "#/definitions/APIResponse" }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AttachmentInfo": {
      "description": "Metdata for an attachment",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the attachment",
          "type": "string"
        },
        "type": {
          "description": "ContentType of the attachment",
          "type": "string"
        },
        "views": {
          "description": "attachment views",
          "type": "array",
          "items": { "$ref": "#/definitions/AttachmentView" }
        }
      }
    },
    "AttachmentView": {
      "description": "Attachment View name and size",
      "type": "object",
      "properties": {
        "viewId": {
          "description": "content type of the attachmnet",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "description": "Name of the attachment",
          "type": "integer"
        }
      }
    },
    "APIResponse": {
      "type": "object",
      "properties": { "message": { "type": "string" } }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the activity [message|contactRelationUpdate|converationUpdate|typing]",
          "type": "string"
        },
        "id": {
          "description": "Id for the activity",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Time when message was sent",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint",
          "type": "string"
        },
        "channelId": {
          "description": "ChannelId the activity was on",
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "Sender address"
        },
        "conversation": {
          "$ref": "#/definitions/ConversationAccount",
          "description": "Conversation"
        },
        "recipient": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "(Outbound to bot only) Bot's address that received the message"
        },
        "textFormat": {
          "description": "Format of text fields [plain|markdown] Default:markdown",
          "type": "string"
        },
        "attachmentLayout": {
          "description": "AttachmentLayout - hint for how to deal with multiple attachments Values: [list|carousel] Default:list",
          "type": "string"
        },
        "membersAdded": {
          "description": "Array of address added",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "membersRemoved": {
          "description": "Array of addresses removed",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "Conversations new topic name",
          "type": "string"
        },
        "historyDisclosed": {
          "description": "the previous history of the channel was disclosed",
          "type": "boolean"
        },
        "locale": {
          "description": "The language code of the Text field",
          "type": "string"
        },
        "text": {
          "description": "Content for the message",
          "type": "string"
        },
        "summary": {
          "description": "Text to display if you can't render cards",
          "type": "string"
        },
        "attachments": {
          "description": "Attachments",
          "type": "array",
          "items": { "$ref": "#/definitions/Attachment" }
        },
        "entities": {
          "description": "Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.",
          "type": "array",
          "items": { "$ref": "#/definitions/Entity" }
        },
        "channelData": {
          "$ref": "#/definitions/Object",
          "description": "Channel specific payload"
        },
        "action": {
          "description": "ContactAdded/Removed action",
          "type": "string"
        },
        "replyToId": {
          "description": "the original id this message is a response to",
          "type": "string"
        }
      }
    },
    "ChannelAccount": {
      "description": "Channel account information needed to route a message",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "ConversationAccount": {
      "description": "Channel account information for a conversation",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "Is this a reference to a group",
          "type": "boolean"
        },
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name",
          "type": "string"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "contentType": {
          "description": "mimetype/Contenttype for the file",
          "type": "string"
        },
        "contentUrl": {
          "description": "Content Url",
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/Object",
          "description": "Embedded content"
        },
        "name": {
          "description": "(OPTIONAL) The name of the attachment",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "(OPTIONAL) Thumbnail associated with attachment",
          "type": "string"
        }
      }
    },
    "Entity": {
      "description": "Object of schema.org types",
      "type": "object",
      "properties": {
        "type": {
          "description": "Entity Type (typically from schema.org types)",
          "type": "string"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": { }
    },
    "ConversationParameters": {
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "IsGroup",
          "type": "boolean"
        },
        "bot": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "The bot address for this conversation"
        },
        "members": {
          "description": "Members to add to the conversation",
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelAccount" }
        },
        "topicName": {
          "description": "(Optional) Topic of the conversation (if supported by the channel)",
          "type": "string"
        }
      }
    },
    "ResourceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "string"
        }
      }
    },
    "AttachmentData": {
      "description": "Attachment data",
      "type": "object",
      "properties": {
        "type": {
          "description": "content type of the attachmnet",
          "type": "string"
        },
        "name": {
          "description": "Name of the attachment",
          "type": "string"
        },
        "originalBase64": {
          "format": "byte",
          "description": "original content",
          "type": "string"
        },
        "thumbnailBase64": {
          "format": "byte",
          "description": "Thumbnail",
          "type": "string"
        }
      }
    },
    "HeroCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of i",
          "type": "array",
          "items": { "$ref": "#/definitions/CardImage" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "CardImage": {
      "type": "object",
      "properties": {
        "url": {
          "description": "URL Thumbnail image for major content property.",
          "type": "string"
        },
        "alt": {
          "description": "Image description intended for screen readers",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "Action assigned to specific Attachment.E.g.navigate to specific URL or play/open media content"
        }
      }
    },
    "CardAction": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Defines the type of action implemented by this button.",
          "type": "string"
        },
        "title": {
          "description": "Text description which appear on the button.",
          "type": "string"
        },
        "image": {
          "description": "URL Picture which will appear on the button, next to text label.",
          "type": "string"
        },
        "value": {
          "description": "Supplementary parameter for action. Content of this property depends on the ActionType",
          "type": "string"
        }
      }
    },
    "ThumbnailCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card",
          "type": "string"
        },
        "text": {
          "description": "Text for the card",
          "type": "string"
        },
        "images": {
          "description": "Array of i",
          "type": "array",
          "items": { "$ref": "#/definitions/CardImage" }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself"
        }
      }
    },
    "ReceiptCard": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card",
          "type": "string"
        },
        "items": {
          "description": "Array of Receipt Items",
          "type": "array",
          "items": { "$ref": "#/definitions/ReceiptItem" }
        },
        "facts": {
          "description": "Array of Fact Objects   Array of key-value pairs.",
          "type": "array",
          "items": { "$ref": "#/definitions/Fact" }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card"
        },
        "total": {
          "description": "Total amount of money paid (or should be paid)",
          "type": "string"
        },
        "tax": {
          "description": "Total amount of TAX paid(or should be paid)",
          "type": "string"
        },
        "vat": {
          "description": "Total amount of VAT paid(or should be paid)",
          "type": "string"
        },
        "buttons": {
          "description": "Set of actions applicable to the current card",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        }
      }
    },
    "ReceiptItem": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the Card",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle appears just below Title field, differs from Title in font styling only",
          "type": "string"
        },
        "text": {
          "description": "Text field appears just below subtitle, differs from Subtitle in font styling only",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/CardImage",
          "description": "Image"
        },
        "price": {
          "description": "Amount with currency",
          "type": "string"
        },
        "quantity": {
          "description": "Number of items of given kind",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the Item bubble."
        }
      }
    },
    "Fact": {
      "description": "Set of key-value pairs. Advantage of this section is that key and value properties will be \r\n            rendered with default style information with some delimiter between them. So there is no need for developer to specify style information.",
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "SigninCard": {
      "description": "A card representing a request to signing",
      "type": "object",
      "properties": {
        "text": {
          "description": "Text for signin request",
          "type": "string"
        },
        "buttons": {
          "description": "Action to use to perform signin",
          "type": "array",
          "items": { "$ref": "#/definitions/CardAction" }
        }
      }
    },
    "GeoCoordinates": {
      "description": "GeoCoordinates (entity type: \"https://schema.org/GeoCoordinates\")",
      "type": "object",
      "properties": {
        "elevation": {
          "format": "double",
          "description": "Elevation of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)",
          "type": "number"
        },
        "type": {
          "description": "The type of the thing",
          "type": "string"
        },
        "name": {
          "description": "The name of the thing",
          "type": "string"
        }
      }
    },
    "Place": {
      "description": "Place (entity type: \"https://schema.org/Place\")",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Object",
          "description": "Address of the place (may be `string` or complex object of type `PostalAddress`)"
        },
        "geo": {
          "$ref": "#/definitions/Object",
          "description": "Geo coordinates of the place (may be complex object of type `GeoCoordinates` or `GeoShape`)"
        },
        "hasMap": {
          "$ref": "#/definitions/Object",
          "description": "Map to the place (may be `string` (URL) or complex object of type `Map`)"
        },
        "type": {
          "description": "The type of the thing",
          "type": "string"
        },
        "name": {
          "description": "The name of the thing",
          "type": "string"
        }
      }
    }
  }
}
